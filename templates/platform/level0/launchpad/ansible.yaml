- name: "[{{ level }}-{{ base_folder }}] Clean-up directory"
  file:
    path: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"
    state: absent
  when: config.configuration_folders.platform.cleanup_destination | bool

- name: "[{{ level }}-{{ base_folder }}] Creates directory"
  file:
    path: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"
    state: directory

- name: "[{{ level }}-{{ base_folder }}] lauchpad"
  ansible.builtin.template:
    src: "{{ level }}/{{ base_folder }}/{{ item }}.tfvars.j2"
    dest: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item }}.tfvars"
    force: yes
  loop:
    - dynamic_secrets
    - global_settings
    - keyvaults
    - landingzone
    - resource_groups
    - role_mappings
    - storage_accounts

- name: "[{{ level }}-{{ base_folder }}] Clean-up identity files"
  file:
    path: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item }}.tfvars"
    state: absent
  when: config.platform_identity.azuread_identity_mode == "logged_in_user"
  loop:
    - azuread_api_permissions
    - azuread_applications
    - azuread_group_members
    - azuread_groups
    - azuread_roles
    - keyvault_policies
    - service_principals

- name: "[{{ level }}-{{ base_folder }}] lauchpad - identity - service_principal"
  ansible.builtin.template:
    src: "{{ level }}/{{ base_folder }}/{{ item }}.tfvars.j2"
    dest: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item }}.tfvars"
    force: yes
  when: config.platform_identity.azuread_identity_mode != 'logged_in_user'
  loop:
    - azuread_api_permissions
    - azuread_applications
    - azuread_group_members
    - azuread_groups
    - azuread_roles
    - keyvault_policies
    - service_principals

- name: "[{{ level }}-{{ base_folder }}] Deploy the launchpad"
  when: boostrap_launchpad | bool | default(false)
  shell: |
    /tf/rover/rover.sh \
      -lz /tf/caf/landingzones/caf_launchpad \
      -var-folder {{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }} \
      -tfstate_subscription_id {{ config.platform_core_setup.enterprise_scale.primary_subscription_details.subscription_id }} \
      -target_subscription {{ config.platform_core_setup.enterprise_scale.primary_subscription_details.subscription_id }} \
      -tfstate {{ tfstates.launchpad.tfstate }} \
      -log-severity {{ config.gitops.rover_log_error }} \
      -launchpad \
      -env {{ config.caf_terraform.launchpad.caf_environment }} \
      -level {{ level }} \
      -a apply

- name: "[{{ level }}-{{ base_folder }}] Get tfstate account name"
  register: launchpad_storage_account
  shell: |
    az storage account list \
      --subscription {{ config.platform_core_setup.enterprise_scale.primary_subscription_details.subscription_id }} \
      --query "[?tags.caf_tfstate=='{{ tfstates.launchpad.level }}' && tags.caf_environment=='{{ config.caf_terraform.launchpad.caf_environment }}'].{name:name}[0]" -o json | jq -r .name

- name: "[{{ level }}-{{ base_folder }}] Get launchpad tfstate details"
  register: launchpad_tfstate_exists
  ignore_errors: true
  shell: |
    az storage blob download \
      --name "{{ tfstates.launchpad.tfstate }}" \
      --account-name "{{ launchpad_storage_account.stdout | default('') }}" \
      --container-name "{{ tfstates.launchpad.workspace | default('tfstate') }}" \
      --auth-mode "login" \
      --file "~/.terraform.cache/launchpad/{{ tfstates.launchpad.tfstate }}"

- name: "[{{ level }}-{{ base_folder }}] Get credentials tfstate details"
  register: credentials_tfstate_exists
  ignore_errors: true
  shell: |
    az storage blob download \
      --name "{{ tfstates.launchpad_credentials.tfstate }}" \
      --account-name "{{ launchpad_storage_account.stdout }}" \
      --container-name "{{ tfstates.launchpad.workspace | default('tfstate') }}" \
      --auth-mode "login" \
      --file "~/.terraform.cache/launchpad/{{ tfstates.launchpad_credentials.tfstate }}"

- name: "[{{ level }}-{{ base_folder }}] Get launchpad_credentials details"
  when: credentials_tfstate_exists.rc == 0
  shell: "cat ~/.terraform.cache/launchpad/{{ tfstates.launchpad_credentials.tfstate }}"
  register: launchpad_credentials
    
- name: "[{{ level }}-{{ base_folder }}] Get launchpad_credentials json data"
  when: credentials_tfstate_exists.rc == 0
  set_fact:
    credjsondata: "{{ launchpad_credentials.stdout | from_json }}"

- name: "[{{ level }}-{{ base_folder }}] set keyvaults"
  when: credentials_tfstate_exists.rc == 0
  set_fact:
    keyvaults: "{{ credjsondata | json_query(path) }}"
  vars: 
    path: 'outputs.objects.value.launchpad_credentials_rotation.keyvaults'

- name: "[{{ level }}-{{ base_folder }}] cleanup"
  when: credentials_tfstate_exists.rc == 0
  file:
    path: "~/.terraform.cache/launchpad/{{ tfstates.launchpad_credentials.tfstate }}"
    state: absent

# Update readme
- name: "[{{ level }}-{{ base_folder }}] launchpad - readme"
  ansible.builtin.template:
    src: "{{ level }}/{{ base_folder }}/readme.md"
    dest: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/readme.md"
    force: yes