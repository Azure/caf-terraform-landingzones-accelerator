- name: "[{{ level }}-{{ base_folder }}] Clean-up directory"
  file:
    path: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"
    state: absent
  when: config.configuration_folders.platform.cleanup_destination | bool

- name: "[{{ level }}-{{ base_folder }}] Creates directory"
  file:
    path: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}"
    state: directory

- name: "[{{ level }}-{{ base_folder }}] generate configuration files."
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ level }}/{{ base_folder }}/*.tfvars.j2"

- name: "[{{ level }}-{{ base_folder }}] deploy."
  when: boostrap_launchpad | bool
  shell: |
    /tf/rover/rover.sh \
      -lz /tf/caf/landingzones/caf_solution \
      -var-folder {{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }} \
      -tfstate_subscription_id {{ config.platform_core_setup.enterprise_scale.primary_subscription_details.subscription_id }} \
      -target_subscription {{ config.platform_core_setup.enterprise_scale.primary_subscription_details.subscription_id }} \
      -tfstate {{ tfstates.launchpad_credentials.tfstate }} \
      -launchpad \
      -log-severity {{ config.gitops.rover_log_error }} \
      -env {{ config.caf_terraform.launchpad.caf_environment }} \
      -level {{ level }} \
      -a apply
  args:
    warn: no

- debug:
    msg: "{{ keyvaults.cred_subscription_creation_platform.vault_uri }}"
  when: credentials_tfstate_exists.rc == 0

- name: "[{{ level }}-{{ base_folder }}] generate configuration files."
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ config.configuration_folders.platform.destination_base_path }}/{{ config.configuration_folders.platform.destination_relative_path }}/{{ level }}/{{ base_folder }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ level }}/{{ base_folder }}/*.md"
