#
# azuread_application_credentials
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - azuread_application_credentials"
  when: 
    - asvm_resources.azuread_credential_policies is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/azuread_application_credentials.tfvars.j2"

#
# azuread_applications
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - azuread_applications"
  when: 
    - asvm_resources.azuread_applications is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/azuread_applications.tfvars.j2"

#
# azuread_credential_policies
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - azuread_credential_policies"
  when: 
    - asvm_resources.azuread_credential_policies is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/azuread_credential_policies.tfvars.j2"

#
# azuread_groups
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - azuread_groups"
  when: 
    - asvm_resources.azuread_groups is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/azuread_groups.tfvars.j2"

#
# azuread_service_principals
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - azuread_service_principals"
  when: 
    - asvm_resources.azuread_service_principals is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/azuread_service_principals.tfvars.j2"

#
# custom_role_definitions
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - custom_role_definitions"
  when: 
    - asvm_resources.custom_role_definitions is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/custom_role_definitions.tfvars.j2"

#
# keyvaults
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - keyvaults"
  when: 
    - asvm_resources.keyvaults is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/keyvaults.tfvars.j2"

#
# landingzone
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - landingzone"
  when: 
    - asvm_resources.landingzone is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/landingzone.tfvars.j2"

#
# recovery_vaults
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - recovery_vaults"
  when: 
    - asvm_resources.recovery_vaults is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/recovery_vaults.tfvars.j2"
  
#
# resource_groups
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - resource_groups"
  when: 
    - asvm_resources.resource_groups is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/resource_groups.tfvars.j2"
  
#
# role_mapping
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - role_mapping"
  when: 
    - asvm_resources.role_mapping is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/role_mapping.tfvars.j2"

#
# virtual_hub_connections
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - virtual_hub_connections"
  when: 
    - asvm_resources.virtual_hub_connections is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/virtual_hub_connections.tfvars.j2"
  
  
#
# virtual_networks
#
- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - virtual_networks"
  when: 
    - asvm_resources.virtual_networks is defined
    - subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/virtual_networks.tfvars.j2"
  

- name: "[{{ level }}-{{ asvm_long_folder.path }}] - resources - *.md"
  when: subscription_tfstate_exists.rc == 0
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path_resources }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ base_templates_folder }}/{{ level }}/resources/*.md"
