- name: CAF Terraform - Generate configuration files
  hosts: localhost
  vars:
    config: "{{ lookup('file', '{{ config_folder }}/{{scenario}}.caf.platform.yaml') | from_yaml }}"
    connectivity_virtual_wan: "{{ lookup('file', '{{ config_folder }}/platform/connectivity_virtual_wan.yaml') | from_yaml }}"
    connectivity_virtual_hub: "{{ lookup('file', '{{ config_folder }}/platform/connectivity_virtual_hub.yaml') | from_yaml }}"
    connectivity_firewall: "{{ lookup('file', '{{ config_folder }}/platform/connectivity_firewall.yaml') | from_yaml }}"
    connectivity_firewall_policies: "{{ lookup('file', '{{ config_folder }}/platform/connectivity_firewall_policies.yaml') | from_yaml }}"
    connectivity: "{{ lookup('file', '{{ config_folder }}/platform/connectivity.yaml') | from_yaml }}"
    identity: "{{ lookup('file', '{{ config_folder }}/platform/identity.yaml') | from_yaml }}"
    management: "{{ lookup('file', '{{ config_folder }}/platform/management.yaml') | from_yaml }}"
    subscriptions: "{{ lookup('file', '{{ config_folder }}/platform/subscriptions.yaml') | from_yaml }}"
    cidr: "{{ lookup('file', '{{ config_folder }}/platform/cidr.yaml') | from_yaml }}"
    tfstates: "{{ lookup('file', '{{ config_folder }}/platform/tfstates.yaml') | from_yaml }}"
    tfstates_asvm: "{{ lookup('file', '{{ config_folder }}/asvm/tfstates.yaml') | from_yaml }}"
    base_templates_folder: "{{ base_templates_folder }}"


  tasks:
#
# Level 3
#

# asvm

    - name: List of asvm to process
      register: directories_to_process
      vars:
        base_folder: "asvm"
        level: "level3"
      find:
        paths: "{{ config_folder }}/{{ base_folder }}"
        recurse: yes
        file_type: directory

    - name: set asvm base_folder
      set_fact:
        base_folder_asvm: "asvm"
        base_folder_platform: "platform"
        level: "level3"

    - name: "{{ level }}-{{ base_folder_asvm }} | Azure Subscription Vending Machine (ASVM)"
      include_tasks: "{{ level }}/{{ base_folder_asvm }}/ansible.yaml"
      loop: "{{ directories_to_process.files if directories_to_process.files is iterable else []  | json_query('[*].path') }}"
      loop_control:
        loop_var: asvm_long_folder
