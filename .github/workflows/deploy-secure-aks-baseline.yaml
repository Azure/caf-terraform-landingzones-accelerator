name: Deploy_Seccure_Aks_Baseline
# The pipeline is triggered on:
#  - PR/Issue comments "/deploy-all", "/deploy-lunchpad", "/deploy-foundation", "/deploy-networking",
#                      "/deploy-shared-services", "/deploy-aks"
#  - push to starter


on:
  push:
    branches:
    - 'eedorenko/levels'
  # issue_comment:
  #   types:
  #   - created

env:
  AZURE_CREDENTIALS: '{"clientId":"${{ secrets.SERVICE_PRINCIPAL }}", "clientSecret":"${{ secrets.SERVICE_PRINCIPAL_PWD }}", "subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}", "tenantId":"${{ secrets.TENANT }}"}' 
  event_sha: +refs/pull/${{ github.event.issue.number }}/merge

jobs:
  deploy-lunchpad:
    runs-on: ubuntu-latest
    container:
      image:  aztfmod/rover:0.14.8-2103.1601
      options: --user 0
    steps:
      - name: Checkout Repository
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad') || github.event_name != 'issue_comment'      
        uses: actions/checkout@v2
      - name: Checkout PR code
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')
        run: |
          git fetch origin ${{ env.event_sha }}
          git checkout FETCH_HEAD

      - name: Azure Login
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad') || github.event_name != 'issue_comment'     
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Launchpad
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad') || github.event_name != 'issue_comment'     
        run: |
          ln -s ${GITHUB_WORKSPACE}/caf-terraform-landingzones-starter /tf/caf
          echo "ls /tf/caf" && ls -lsa /tf/caf
          /tf/caf/enterprise_scale/construction_sets/aks/online/aks_secure_baseline/levels/launchpad/launchpad.sh

  deploy-foundation: 
    runs-on: ubuntu-latest
    needs: deploy-lunchpad
    container:
      image:  aztfmod/rover:0.14.8-2103.1601
      options: --user 0
    steps:
      - name: Checkout Repository
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-foundation') || github.event_name != 'issue_comment'      
        uses: actions/checkout@v2
      - name: Checkout PR code
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-foundation')
        run: |
          git fetch origin ${{ env.event_sha }}
          git checkout FETCH_HEAD

      - name: Azure Login
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-foundation') || github.event_name != 'issue_comment'     
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Deploy
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-foundation') || github.event_name != 'issue_comment'           
        run: |
            ln -s ${GITHUB_WORKSPACE}/caf-terraform-landingzones-starter /tf/caf
            echo "ls /tf/caf" && ls -lsa /tf/caf
            cd ${GITHUB_WORKSPACE}/enterprise_scale/construction_sets/aks
            ./deploy_level_with_rover.sh 1_foundation level1
        env:
           ARM_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL }}
           ARM_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
           ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}            
           ARM_TENANT_ID: ${{ secrets.TENANT }}

      - name: Test
        if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-foundation') || github.event_name != 'issue_comment'           
        uses: azure/CLI@v1
        with:
          inlineScript: |          
            echo "Invoke integration test"

  # deploy-networking: 
  #   runs-on: ubuntu-latest
  #   needs: deploy-foundation
  #   steps:
  #     - name: Checkout Repository
  #       if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')      
  #       uses: actions/checkout@v2
  #     - name: Checkout PR code
  #       if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')
  #       run: |
  #         git fetch origin ${{ env.event_sha }}
  #         git checkout FETCH_HEAD

  #     # - name: Azure Login
  #     #   if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')      
  #     #   uses: azure/login@v1
  #     #   with:
  #     #     creds: ${{ env.AZURE_CREDENTIALS }}

  #     - uses: hashicorp/setup-terraform@v1
  #       if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')
  #       name: Terraform Install

  #     - name: Terraform Init
  #       if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')
  #       run: |
  #         cd $GITHUB_WORKSPACE/enterprise_scale/construction_sets/aks
  #         terraform init -upgrade

  #     - name: Deploy
  #       if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')      
  #       # uses: azure/CLI@v1
  #       # with:
  #       #   inlineScript: |          
  #       run: |
  #           cd $GITHUB_WORKSPACE/enterprise_scale/construction_sets/aks
  #           ./deploy_level.sh 2_networking
  #       env:
  #          ARM_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL }}
  #          ARM_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
  #          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}            
  #          ARM_TENANT_ID: ${{ secrets.TENANT }}

  #     - name: Test
  #       if: contains(github.event.comment.body, '/deploy-all') || contains(github.event.comment.body, '/deploy-lunchpad')      
  #       uses: azure/CLI@v1
  #       with:
  #         inlineScript: |          
  #           echo "Invoke integration test"
