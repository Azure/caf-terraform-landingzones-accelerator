- name: Setup Azure devops virtual machine
  hosts: localhost
  connection: local

  vars:
    - resource_group_name: rg-caf-devops-maintainer
    - location: southeastasia
    - vnet_name: vnet-caf-devops
    - address_prefixes: "192.168.111.0/24"
    - vm_name: caf-devops-01
    - admin_username: king.admin
    - admin_password:
    - vm_size: Standard_D8ds_v4

  tasks:
    - name: Create resource group
      azure_rm_resourcegroup:
        name: "{{ resource_group_name }}"
        location: "{{ location }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: "{{ resource_group_name }}"
        name: "{{ vnet_name }}"
        address_prefixes: "192.168.111.0/24"

    - name: Add devops-vm subnet
      azure_rm_subnet:
        resource_group: "{{ resource_group_name }}"
        name: devops-vm
        address_prefix: "192.168.111.0/25"
        virtual_network: "{{ vnet_name }}"

    - name: Create Network Security Group
      azure_rm_securitygroup:
        resource_group: "{{ resource_group_name }}"
        name: nsg-remote-management
        rules:
          - name: 'allow_rdp'
            protocol: Tcp
            destination_port_range: 3389
            access: Allow
            priority: 501
            direction: Inbound
          - name: 'allow_powershell_remoting'
            protocol: Tcp
            destination_port_range: 5986
            access: Allow
            priority: 502
            direction: Inbound

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: "{{ resource_group_name }}"
        allocation_method: Static
        name: "{{ vm_name }}-pip-01"

    - name: Create a network interface
      azure_rm_networkinterface:
        name: "{{ vm_name }}-nic-01"
        resource_group: "{{ resource_group_name }}"
        virtual_network: "{{ vnet_name }}"
        subnet_name: devops-vm
        security_group: nsg-remote-management
        ip_configurations:
          - name: default
            public_ip_address_name: "{{ vm_name }}-pip-01"
            primary: True

    - name: Create VM
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group_name }}"
        name: "{{ vm_name }}"
        vm_size: "{{ vm_size }}"
        admin_username: "{{ admin_username }}"
        admin_password: "{{ admin_password }}"
        network_interfaces: "{{ vm_name }}-nic-01"
        os_type: Windows
        managed_disk_type: Premium_LRS
        vm_identity: SystemAssigned
        image:
          offer: Windows-10
          publisher: MicrosoftWindowsDesktop
          sku: 21h1-pro
          version: latest

    - name: Enable HTTPS WinRM listener
      azure_rm_virtualmachineextension:
        name: winrm
        resource_group: "{{ resource_group_name }}"
        virtual_machine_name: "{{ vm_name }}"
        publisher: Microsoft.Compute
        virtual_machine_extension_type: CustomScriptExtension
        type_handler_version: '1.9'
        settings: '{"fileUris": ["https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"],"commandToExecute": "powershell -ExecutionPolicy Unrestricted -File ConfigureRemotingForAnsible.ps1"}'
        auto_upgrade_minor_version: true

    - name: Get facts for one Public IP
      azure_rm_publicipaddress_info:
        resource_group: "{{ resource_group_name }}"
        name: "{{ vm_name }}-pip-01"
      register: publicipaddresses

    - name: set public ip address fact
      set_fact: publicipaddress="{{ publicipaddresses | json_query('publicipaddresses[0].ip_address')}}"

    - name: wait for the WinRM port to come online
      wait_for:
        port: 5986
        host: '{{ publicipaddress }}'
        timeout: 600

- name: Setup the CAF development tools
  hosts: localhost
  become_method: runas

  vars:
    - admin_password:
    - ansible_connection: winrm
    - ansible_winrm_host: "{{ publicipaddresses | json_query('publicipaddresses[0].ip_address')}}"
    - ansible_winrm_user: "{{ admin_user | default('king.admin') }}"
    - ansible_winrm_password: "{{ admin_password }}"
    - ansible_winrm_scheme: https
    - ansible_winrm_transport: ntlm
    - ansible_winrm_server_cert_validation: ignore
    - rover_image: "{{ caf_rover_image | default('aztfmod/rover:1.0.1-2107.2004') }}"
    - git_starter_url: "{{ caf_git_starter_url | default('https://github.com/Azure/caf-terraform-landingzones-starter.git') }}"
    - git_starter_branch_tag: "{{ caf_git_starter_branch_tag | default('AL-contoso') }}"
    - git_landingzones_url: "{{ caf_git_landingzones_url | default('https://github.com/Azure/caf-terraform-landingzones.git') }}"
    - git_landingzones_branch_tag: "{{ caf_git_landingzones_branch_tag | default('2107.1') }}"

  tasks:
    - name: Install Linux subsystem
      ansible.windows.win_optional_feature:
        name:
          - Microsoft-Windows-Subsystem-Linux
          - VirtualMachinePlatform
        state: present
      register: linux_sub_system

    - name: Reboot the virtual machine
      ansible.windows.win_reboot:
      when: linux_sub_system.reboot_required

    - name: Download the wsl 2
      win_get_url:
        url: https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi
        dest: C:\Users\{{ ansible_winrm_user }}\wsl_update_x64.msi

    - name: Install wsl 2
      win_package:
        path: C:\Users\{{ ansible_winrm_user }}\wsl_update_x64.msi
        state: present

    - name: Cleanup file
      win_file:
        path: C:\Users\{{ ansible_winrm_user }}\wsl_update_x64.msi
        state: absent

    - name: Install tools
      win_chocolatey:
        name:
          - git
          - python3
        state: present

    # Instal Docker desktop
    - name: Install docker desktop
      win_chocolatey:
        name: docker-desktop
        state: present

    - name: Copy scripts
      ansible.windows.win_copy:
        src: start-docker-desktop.ps1
        dest: d:\start-docker-desktop.ps1
      become: yes
      become_user: "{{ ansible_winrm_user }}"

    - name: Start Docker desktop
      win_shell: d:\start-docker-desktop.ps1
      become: yes
      become_user: "{{ ansible_winrm_user }}"

    - name: Pull the rover devcontainer base image
      ansible.windows.win_shell: docker pull {{ rover_image }}

    # Install vscode
    - name: Install vscode
      win_chocolatey:
        name: vscode
        state: present

    - name: Install vscode remote development extension
      win_command: powershell.exe -
      args:
        stdin: code --install-extension ms-vscode-remote.remote-containers

    # Cloning the repositories
    - name: Check starter destination folder.
      ansible.windows.win_stat:
        path: c:\users\{{ ansible_winrm_user }}\git\github.com\azure\caf-terraform-landingzones-starter
      register: git_destination

    - name: Clone starter kit
      win_shell: git clone -b {{ git_starter_branch_tag }} {{ git_starter_url }} C:\Users\{{ ansible_winrm_user }}\git\github.com\azure\caf-terraform-landingzones-starter
      when: git_destination.stat.exists == false

    - name: Check landingzones destination folder.
      ansible.windows.win_stat:
        path: c:\users\{{ ansible_winrm_user }}\git\github.com\azure\caf-terraform-landingzones-starter\landingzones
      register: git_landingzones_destination

    - name: Clone landing_zones
      win_shell: git clone -b {{ git_landingzones_branch_tag }} {{ git_landingzones_url }} C:\Users\{{ ansible_winrm_user }}\git\github.com\azure\caf-terraform-landingzones-starter\landingzones
      when: git_landingzones_destination.stat.exists == false